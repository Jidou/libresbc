#!define IPADDRESS "192.168.1.101"

#!define SWITCH_IPADDRESS "192.168.1.102"


#!define FLAG_FROM_SWITCH 1
#!define FLAG_FROM_USER 2

# ------------------ module loading ----------------------------------
loadmodule "tm.so"
loadmodule "rr.so"
loadmodule "pv.so"
loadmodule "sl.so"
loadmodule "maxfwd.so"
loadmodule "nathelper.so"
loadmodule "textops.so"
loadmodule "siputils.so"
loadmodule "xlog.so"
loadmodule "sanity.so"
loadmodule "path.so"

# ----------------- setting module-specific parameters ---------------
modparam("nathelper|registrar", "received_avp", "$avp(s:rcv)")
# -------------------------  request routing logic -------------------
# main routing logic

route {

        # per request initial checks
        route(SANITY_CHECK);

        # CANCEL processing
        if (is_method("CANCEL")) {
                if (t_check_trans()) {
                        t_relay();
                }
                exit;
        }

        route(CHECK_SOURCE_IP);

        ##################################
        ### HANDLE SEQUENTIAL REQUESTS ###
        route(WITHINDLG);

        ###############################
        ### HANDLE INITIAL REQUESTS ###
        t_check_trans();

        if (is_method("INVITE|REFER")) {
                record_route();
        }
       
        if (is_method("REGISTER")) {
            add_path();
        }

        if (isflagset(FLAG_FROM_SWITCH)) {
                # don't send INVITE from SWITCH back to SWITCH, set reply route to handle NAT and forward them along
                t_on_reply("EXTERNAL_REPLY");
        } else {
                # set destination to your SWITCH
                $du = "sip:192.168.1.102:5060";
        }

        route(RELAY);


}


route[SANITY_CHECK]
{
        if (!sanity_check()) {
                #xlog("L_WARN", "$ci|end|message is insane");
                exit;
        }

        if (!mf_process_maxfwd_header("10")) {
                #xlog("L_WARN", "$ci|end|too much hops, not enough barley");
                send_reply("483", "Too Many Hops");
                exit;
        }

        if ($ua == "friendly-scanner" ||
                $ua == "sundayddr" ||
                $ua =~ "sipcli" ) {
                #xlog("L_WARN", "$ci|end|dropping message with user-agent $ua");
                exit;
        }

        if ($si == IPADDRESS) {
                #xlog("L_WARN", "$ci|end|dropping message");
                exit;
        }

}


route[CHECK_SOURCE_IP]
{
        if ($si == SWITCH_IPADDRESS) {
                setflag(FLAG_FROM_SWITCH);
        } else {
                setflag(FLAG_FROM_USER);
        }
}

# Handle requests within SIP dialogs
route[WITHINDLG]
{
        if (has_totag()) {
                # sequential request withing a dialog should
                # take the path determined by record-routing
                if (loose_route()) {
                        route(RELAY);
                } else {
                        if (is_method("NOTIFY")) {
                                route(RELAY);
                        }
                        if (is_method("SUBSCRIBE") && uri == myself) {
                                # in-dialog subscribe requests
                                exit;
                        }
                        if (is_method("ACK")) {
                                if (t_check_trans()) {
                                        # no loose-route, but stateful ACK;
                                        # must be an ACK after a 487
                                        # or e.g. 404 from upstream server
                                        t_relay();
                                        exit;
                                } else {
                                        # ACK without matching transaction ... ignore and discard
                                        #xlog("ACK without matching transaction ... ignore and discard");
                                        exit;
                                }
                        }
                        sl_send_reply("404","Not here");
                }
                exit;
        }
}

onreply_route[EXTERNAL_REPLY]
{
        route(NAT_TEST_AND_CORRECT);
}


route[NAT_TEST_AND_CORRECT]
{
        if (nat_uac_test("3")) {
                if (is_method("REGISTER")) {
                        fix_nated_register();
                } else {
                        fix_nated_contact();
                }
                force_rport();
        }
        if (has_body("application/sdp") && nat_uac_test("8")) {
                fix_nated_sdp("10");
        }
}

route[RELAY]
{
        if (!t_relay()) {
                sl_reply_error();
        }
        exit;
}





nua.c:637 nua_invite() nua: nua_invite: entering
nua_stack.c:569 nua_stack_signal() nua(0x7feab40a06d0): recv signal r_invite
nua_params.c:484 nua_stack_set_params() nua: nua_stack_set_params: entering
soa.c:280 soa_clone() soa_clone(static::0x7feaac001b90, 0x7feaac001390, 0x7feab40a06d0) called
soa.c:403 soa_set_params() soa_set_params(static::0x7feaac021bb0, ...) called
soa.c:403 soa_set_params() soa_set_params(static::0x7feaac021bb0, ...) called
soa.c:1052 soa_set_user_sdp() soa_set_user_sdp(static::0x7feaac021bb0, (nil), 0x7feab4065f53, -1) called
soa.c:890 soa_set_capability_sdp() soa_set_capability_sdp(static::0x7feaac021bb0, (nil), 0x7feab4065f53, -1) called
nua_dialog.c:338 nua_dialog_usage_add() nua(0x7feab40a06d0): adding session usage
nta.c:4446 nta_leg_tcreate() nta_leg_tcreate(0x7feaac033a90)
soa.c:1302 soa_init_offer_answer() soa_init_offer_answer(static::0x7feaac021bb0) called
soa.c:1426 soa_generate_offer() soa_generate_offer(static::0x7feaac021bb0, 0) called
soa_static.c:1148 offer_answer_step() soa_static_offer_answer_action(0x7feaac021bb0, soa_generate_offer): called
soa_static.c:1189 offer_answer_step() soa_static(0x7feaac021bb0, soa_generate_offer): generating local description
soa_static.c:1217 offer_answer_step() soa_static(0x7feaac021bb0, soa_generate_offer): upgrade with local description
soa_static.c:1029 soa_sdp_mode_set() soa_sdp_mode_set(0x7feacb7fb820, (nil), ""): called
soa_static.c:1446 offer_answer_step() soa_static(0x7feaac021bb0, soa_generate_offer): storing local description
soa.c:1270 soa_get_local_sdp() soa_get_local_sdp(static::0x7feaac021bb0, [(nil)], [0x7feacb7fd9a0], [0x7feacb7fd99c]) called
nta.c:2694 nta_tpn_by_url() nta: selecting scheme sip
tport.c:3286 tport_tsend() tport_tsend(0x7feaac006170) tpn = udp/13.228.87.44:5060
tport.c:4075 tport_resolve() tport_resolve addrinfo = 13.228.87.44:5060
tport.c:4709 tport_by_addrinfo() tport_by_addrinfo(0x7feaac006170): not found by name udp/13.228.87.44:5060
tport.c:3623 tport_vsend() tport_vsend(0x7feaac006170): 1077 bytes of 1077 to udp/13.228.87.44:5060
tport.c:3521 tport_send_msg() tport_vsend returned 1077
send 1077 bytes to udp/[13.228.87.44]:5060 at 16:07:07.604627:




nua.c:637 nua_invite() nua: nua_invite: entering                                                                                                                                                              
nua_stack.c:569 nua_stack_signal() nua(0x7feac4001420): recv signal r_invite                                                                                                                                  
nua_params.c:484 nua_stack_set_params() nua: nua_stack_set_params: entering                                                                                                                                   
soa.c:280 soa_clone() soa_clone(static::0x7feab00024c0, 0x7feab0001cc0, 0x7feac4001420) called                                                                                                                
soa.c:403 soa_set_params() soa_set_params(static::0x7feab00173b0, ...) called                                                                                                                                 
soa.c:403 soa_set_params() soa_set_params(static::0x7feab00173b0, ...) called                                                                                                                                 
soa.c:1052 soa_set_user_sdp() soa_set_user_sdp(static::0x7feab00173b0, (nil), 0x7feac40056cd, -1) called                                                                                                      
soa.c:890 soa_set_capability_sdp() soa_set_capability_sdp(static::0x7feab00173b0, (nil), 0x7feac40056cd, -1) called                                                                                           
nua_dialog.c:338 nua_dialog_usage_add() nua(0x7feac4001420): adding session usage                                                                                                                             
nta.c:4446 nta_leg_tcreate() nta_leg_tcreate(0x7feab000b8c0)                                                                                                                                                  
soa.c:1302 soa_init_offer_answer() soa_init_offer_answer(static::0x7feab00173b0) called
soa.c:1426 soa_generate_offer() soa_generate_offer(static::0x7feab00173b0, 0) called
soa_static.c:1148 offer_answer_step() soa_static_offer_answer_action(0x7feab00173b0, soa_generate_offer): called
soa_static.c:1189 offer_answer_step() soa_static(0x7feab00173b0, soa_generate_offer): generating local description
soa_static.c:1217 offer_answer_step() soa_static(0x7feab00173b0, soa_generate_offer): upgrade with local description
soa_static.c:1029 soa_sdp_mode_set() soa_sdp_mode_set(0x7feacacf3820, (nil), ""): called
soa_static.c:1446 offer_answer_step() soa_static(0x7feab00173b0, soa_generate_offer): storing local description
soa.c:1270 soa_get_local_sdp() soa_get_local_sdp(static::0x7feab00173b0, [(nil)], [0x7feacacf59a0], [0x7feacacf599c]) called
nta.c:2694 nta_tpn_by_url() nta: selecting scheme sip
tport.c:3286 tport_tsend() tport_tsend(0x7feab0005860) tpn = udp/172.0.0.1:5060
tport.c:4075 tport_resolve() tport_resolve addrinfo = 172.0.0.1:5060
tport.c:4709 tport_by_addrinfo() tport_by_addrinfo(0x7feab0005860): not found by name udp/172.0.0.1:5060
tport.c:3665 tport_send_fatal() tport_vsend(0x7feab0005860): Invalid argument with (s=25 udp/172.0.0.1:5060)
tport.c:3521 tport_send_msg() tport_vsend returned -1
nta.c:8548 outgoing_print_tport_error() nta: INVITE (38715250): Invalid argument (22) with udp/[172.0.0.1]:5060
nta.c:1354 set_timeout() nta: timer set to 32000 ms 
nua_session.c:4140 signal_call_state_change() nua(0x7feac4001420): call state changed: init -> calling, sent offer
soa.c:1270 soa_get_local_sdp() soa_get_local_sdp(static::0x7feab00173b0, [0x7feacacf5980], [0x7feacacf5988], [(nil)]) called
nua_stack.c:269 nua_stack_event() nua(0x7feac4001420): event i_state INVITE sent
nua_stack.c:271 nua_stack_event() nua(0x7feac4001420): event r_invite 503 Service Unavailable
nua_session.c:4140 signal_call_state_change() nua(0x7feac4001420): call state changed: calling -> init
nua_stack.c:271 nua_stack_event() nua(0x7feac4001420): event i_state 503 Service Unavailable
nua_stack.c:271 nua_stack_event() nua(0x7feac4001420): event i_terminated 503 Service Unavailable
nua_dialog.c:397 nua_dialog_usage_remove_at() nua(0x7feac4001420): removing session usage
soa.c:356 soa_destroy() soa_destroy(static::0x7feab00173b0) called
nta.c:4499 nta_leg_destroy() nta_leg_destroy(0x7feab000b8c0)
nua_stack.c:359 nua_application_event() nua: nua_application_event: entering
nua_stack.c:359 nua_application_event() nua: nua_application_event: entering
nua_stack.c:359 nua_application_event() nua: nua_application_event: entering
nua_stack.c:359 nua_application_event() nua: nua_application_event: entering