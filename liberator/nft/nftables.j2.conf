#!/usr/sbin/nft -f
# https://cryptsus.com/blog/setting-up-nftables-firewall.html
# https://github.com/krabelize/nftables-firewall-config/blob/master/nftables.conf
# https://blog.cloudflare.com/how-to-drop-10-million-packets
# https://github.com/cloudflare/cloudflare-blog

flush ruleset

table inet LIBREFW {

    set WhiteHole {
        type ipv4_addr
        {% if whiteset %} elements = { {{whiteset|join(',')}} } {% endif %}
    }

    set WhiteHoleV6 {
        type ipv6_addr
        {% if whitesetv6 %} elements = { {{whitesetv6|join(',')}} } {% endif %}
    }

    set BlackHole {
        type ipv4_addr
        {% if blackset %} elements = { {{blackset|join(',')}} } {% endif %}
    }

    set BlackHoleV6 {
        type ipv6_addr
        {% if blacksetv6 %} elements = { {{blacksetv6|join(',')}} } {% endif %}
    }

    set TemporaryBlocks {
        type ipv4_addr
        flags timeout
        timeout {{dftbantime}}s
    }

    set TemporaryBlocksV6 {
        type ipv6_addr
        flags timeout
        timeout {{dftbantime}}s
    }

    chain INBOUND {
        type filter hook input priority 0; policy drop;
            iifname lo ip saddr != 127.0.0.0/8 counter drop
            iifname lo ip6 saddr != ::1/128 counter drop
            iifname lo accept
            iifname != lo ip daddr 127.0.0.0/8 counter drop
            #---------------------------------------------------------------------
            ip saddr @WhiteHole accept
            ip saddr @BlackHole drop
            ip saddr @TemporaryBlocks drop
            ip6 saddr @WhiteHoleV6 accept
            ip6 saddr @BlackHoleV6 drop
            ip6 saddr @TemporaryBlocksV6 drop
            #---------------------------------------------------------------------
            ip frag-off & 0x1fff != 0 counter drop comment "IP FRAGMENTS"
            tcp flags != syn ct state new drop comment "FIRST MEET BUT NOT SYN"
            tcp flags & (fin|syn) == (fin|syn) drop comment "NEW BUT FIN"
            tcp flags & (syn|rst) == (syn|rst) drop comment "NEVER MET BUT RESET"
            tcp flags & (fin|syn|rst|psh|ack|urg) < (fin) drop comment "ATTACK"
            tcp flags & (fin|syn|rst|psh|ack|urg) == (fin|psh|urg) drop comment "XMAS ATTACK"
            tcp flags & (fin|syn|rst|psh|ack|urg) == 0x0 counter drop comment "NULL"
            tcp flags syn tcp option maxseg size 1-536 counter drop comment "TCPSEGSIZE"
            ct state invalid counter drop comment "INVALID STATE"
            ct state {established, related} counter accept
            #---------------------------------------------------------------------
            define RTPPORTS = { {{rtpportrange|join('-')}} }
            #---------------------------------------------------------------------
            {%- for name, data in sipprofiles.items() %}
            {%- if data.farendsipaddrv4s %}
            # TRAFFIC FILTER PER SIP PROFILE - IPv4 SIP {{name|upper}}
            define FESIPv4S{{loop.index}} = { {{data.farendsipaddrv4s|join(',')}} }
            tcp dport { {{data.siptcpports|join(',')}} } ip saddr $FESIPv4S{{loop.index}} ip daddr {{data.sip_ip}} counter accept comment "IPv4 SIP TCP {{name|upper}}"
            udp dport { {{data.sipudpports}} } ip saddr $FESIPv4S{{loop.index}} ip daddr {{data.sip_ip}} counter accept comment "IPv4 SIP UDP {{name|upper}}"
            {%- endif %}
            {%- if data.farendrtpaddrv4s %}
            # TRAFFIC FILTER PER SIP PROFILE - IPv4 RTP {{name|upper}}
            define FERTPv4S{{loop.index}} = { {{data.farendrtpaddrv4s|join(',')}} }
            udp dport $RTPPORTS ip saddr $FERTPv4S{{loop.index}} ip daddr {{data.rtp_ip}} counter accept comment "IPv4 RTP {{name|upper}}"
            {%- endif %}
            {%- if data.farendsipaddrv6s %}
            # TRAFFIC FILTER PER SIP PROFILE - IPv6 SIP {{name|upper}}
            define FESIPv6S{{loop.index}} = { {{data.farendsipaddrv6s|join(',')}} }
            tcp dport { {{data.siptcpports|join(',')}} } ip6 saddr $FESIPv6S{{loop.index}} ip6 daddr {{data.sip_ip}} counter accept comment "IPv6 SIP TCP {{name|upper}}"
            udp dport { {{data.sipudpports}} } ip6 saddr $FESIPv6S{{loop.index}} ip6 daddr {{data.sip_ip}} counter accept comment "IPv6 SIP UDP {{name|upper}}"
            {%- endif %}
            {%- if data.farendrtpaddrv6s %}
            # TRAFFIC FILTER PER SIP PROFILE - IPv6 RTP {{name|upper}}
            define FERTPv6S{{loop.index}} = { {{data.farendrtpaddrv6s|join(',')}} }
            udp dport $RTPPORTS ip6 saddr $FERTPv6S{{loop.index}} ip6 daddr {{data.rtp_ip}} counter accept comment "IPv6 RTP {{name|upper}}"
            {%- endif %}
            {%- endfor %}
            #---------------------------------------------------------------------
            {%- for name, data in accesslayers.items() %}
            {%- if data.blackips %}
            # TRAFFIC FILTER PER ACCESS LAYER - IPv4 BLACKIPS {{name|upper}}
            {%- if data.siptcpports %}
            tcp dport { {{data.siptcpports|join(',')}} } ip saddr { {{data.blackips|join(',')}} } ip daddr {{data.sip_ip}} counter drop comment "DROP IPv4 SIP TCP {{name|upper}}"
            tcp dport { {{data.siptcpports|join(',')}} } ip saddr { 0.0.0.0/0 } ip daddr {{data.sip_ip}} counter accept comment "ACCEPT IPv4 SIP TCP {{name|upper}}"
            {%- endif %}
            {%- if data.sipudpports %}
            udp dport { {{data.sipudpports}} } ip saddr { {{data.blackips|join(',')}} } ip daddr {{data.sip_ip}} counter drop comment "DROP IPv4 SIP UDP {{name|upper}}"
            udp dport { {{data.sipudpports}} } ip saddr { 0.0.0.0/0 } ip daddr {{data.sip_ip}} counter accept comment "ACCEPT IPv4 SIP UDP {{name|upper}}"
            {%- endif %}
            {%- endif %}
            {%- if data.whiteips %}
            # TRAFFIC FILTER PER ACCESS LAYER - IPv4 WHITEIPS {{name|upper}}
            {%- if data.siptcpports %}
            tcp dport { {{data.siptcpports|join(',')}} } ip saddr { {{data.whiteips|join(',')}} } ip daddr {{data.sip_ip}} counter accept comment "ACCEPT IPv4 SIP TCP {{name|upper}}"
            {%- endif %}
            {%- if data.sipudpports %}
            udp dport { {{data.sipudpports}} } ip saddr { {{data.whiteips|join(',')}} } ip daddr {{data.sip_ip}} counter accept comment "ACCEPT IPv4 SIP UDP {{name|upper}}"
            {%- endif %}
            {%- endif %}
            {%- if data.blackipv6s %}
            # TRAFFIC FILTER PER ACCESS LAYER - IPv6 BLACKIPS {{name|upper}}
            {%- if data.siptcpports %}
            tcp dport { {{data.siptcpports|join(',')}} } ip6 saddr { {{data.blackipv6s|join(',')}} } ip6 daddr {{data.sip_ip}} counter drop comment "DROP IPv6 vSIP TCP {{name|upper}}"
            tcp dport { {{data.siptcpports|join(',')}} } ip6 saddr { 0.0.0.0/0 } ip6 daddr {{data.sip_ip}} counter accept comment "ACCEPT IPv6 SIP TCP {{name|upper}}"
            {%- endif %}
            {%- if data.sipudpports %}
            udp dport { {{data.sipudpports}} } ip6 saddr { {{data.blackipv6s|join(',')}} } ip6 daddr {{data.sip_ip}} counter drop comment "DROP IPv6 SIP UDP {{name|upper}}"
            udp dport { {{data.sipudpports}} } ip6 saddr { 0.0.0.0/0 } ip6 daddr {{data.sip_ip}} counter accept comment "ACCEPT IPv6 SIP UDP {{name|upper}}"
            {%- endif %}
            {%- endif %}
            {%- if data.whiteipv6s %}
            # TRAFFIC FILTER PER ACCESS LAYER - IPv6 WHITEIPS {{name|upper}}
            {%- if data.siptcpports %}
            tcp dport { {{data.siptcpports|join(',')}} } ip6 saddr { {{data.whiteipv6s|join(',')}} } ip6 daddr {{data.sip_ip}} counter accept comment "ACCEPT IPv6 SIP TCP {{name|upper}}"
            {%- endif %}
            {%- if data.sipudpports %}
            udp dport { {{data.sipudpports}} } ip6 saddr { {{data.whiteipv6s|join(',')}} } ip6 daddr {{data.sip_ip}} counter accept comment "ACCEPT IPv6 SIP UDP {{name|upper}}"
            {%- endif %}
            {%- endif %}
            {%- endfor %}
            #---------------------------------------------------------------------
            tcp dport 22 ct state new limit rate over 5/minute add @TemporaryBlocks { ip saddr timeout 10m } counter comment "SSH BRUTEFORCE"
            #---------------------------------------------------------------------
            # PRECONFIGURED FIREWALL
            include "*.libre.nft"
            #---------------------------------------------------------------------
            # accept neighbour discovery otherwise connectivity breaks
            icmpv6 type { nd-neighbor-solicit, echo-request, nd-router-advert, nd-neighbor-advert } limit rate 1/second counter accept
            icmp type echo-request limit rate 1/second counter accept

            # count and drop any other traffic
            counter drop
    }
    chain OUTBOUND {
        type filter hook output priority 0;
    }
    chain FORWARD {
        type filter hook forward priority 0; policy drop;
    }
}
