#!/usr/sbin/nft -f
# https://cryptsus.com/blog/setting-up-nftables-firewall.html
# https://github.com/krabelize/nftables-firewall-config/blob/master/nftables.conf
# https://blog.cloudflare.com/how-to-drop-10-million-packets
# https://github.com/cloudflare/cloudflare-blog

flush ruleset

table inet LIBREFW {
    chain INBOUND {
        type filter hook input priority 0; policy drop;
            iifname lo ip saddr != 127.0.0.0/8 counter drop
            iifname lo ip6 saddr != ::1/128 counter drop
            iifname lo accept
            iifname != lo ip daddr 127.0.0.0/8 counter drop

            ip saddr @AuthFailure drop
            ip saddr @AttackAvoid drop
            ip saddr @AntiFlooding drop

            tcp flags != syn ct state new drop comment "FIRST MEET BUT NOT SYN"
            tcp flags & (fin|syn) == (fin|syn) drop comment "NEW BUT FIN"
            tcp flags & (syn|rst) == (syn|rst) drop comment "NEVER MET BUT RESET"
            tcp flags & (fin|syn|rst|psh|ack|urg) < (fin) drop comment "ATTACK"
            tcp flags & (fin|syn|rst|psh|ack|urg) == (fin|psh|urg) drop comment "XMAS ATTACK"
            ct state invalid counter drop comment "INVALID STATE"

            ct state {established, related} counter accept
            #---------------------------------------------------------------------
            define RTPPORTS = { {{rtpportrange|join('-')}} }
            #---------------------------------------------------------------------
            {%- for name, data in sipprofiles.items() %}
            # TRAFFIC FILTER PER SIP PROFILE - {{name|upper}}
            {%- if data.farendsipaddrs %}
            define FESIP{{loop.index}} = { {{data.farendsipaddrs|join(',')}} }
            tcp dport { {{data.siptcpports|join(',')}} } ip saddr $FESIP{{loop.index}} ip daddr {{data.sip_ip}} counter accept comment "SIP TCP {{name|upper}}"
            udp dport { {{data.sipudpports|join(',')}} } ip saddr $FESIP{{loop.index}} ip daddr {{data.sip_ip}} counter accept comment "SIP UDP {{name|upper}}"
            {%- endif %}
            {%- if data.farendrtpaddrs %}
            define FERTP{{loop.index}} = { {{data.farendrtpaddrs|join(',')}} }
            udp dport $RTPPORTS ip saddr $FERTP{{loop.index}} ip daddr {{data.rtp_ip}} counter accept comment "RTP {{name|upper}}"
            {%- endif %}
            {%- endfor %}
            #---------------------------------------------------------------------
            {%- for name, data in accesslayers.items() %}
            # TRAFFIC FILTER PER ACCESS LAYER - {{name|upper}}
            {%- if data.blackips %}
            tcp dport { {{data.siptcpports|join(',')}} } ip saddr { {{data.blackips|join(',')}} } ip daddr {{data.sip_ip}} counter drop comment "DROP SIP TCP {{name|upper}}"
            tcp dport { {{data.siptcpports|join(',')}} } ip saddr { 0.0.0.0/0 } ip daddr {{data.sip_ip}} counter accept comment "ACCEPT SIP TCP {{name|upper}}"
            {%- if data.sipudpports %}
            udp dport { {{data.sipudpports}} } ip saddr { {{data.blackips|join(',')}} } ip daddr {{data.sip_ip}} counter drop comment "DROP SIP UDP {{name|upper}}"
            udp dport { {{data.sipudpports}} } ip saddr { 0.0.0.0/0 } ip daddr {{data.sip_ip}} counter accept comment "ACCEPT SIP UDP {{name|upper}}"
            {%- endif %}
            {%- else %}
            tcp dport { {{data.siptcpports|join(',')}} } ip saddr { {{data.whiteips|join(',')}} } ip daddr {{data.sip_ip}} counter accept comment "ACCEPT SIP TCP {{name|upper}}"
            {%- if data.sipudpports %}
            udp dport { {{data.sipudpports}} } ip saddr { {{data.whiteips|join(',')}} } ip daddr {{data.sip_ip}} counter accept comment "ACCEPT SIP UDP {{name|upper}}"
            {%- endif %}
            {%- endif %}
            {%- endfor %}
            #---------------------------------------------------------------------
            # PRECONFIGURED FIREWALL
            include "*.libre.nft"
            #---------------------------------------------------------------------
            tcp dport 22 ip saddr 0.0.0.0/0 counter accept
            # accept neighbour discovery otherwise connectivity breaks
            #icmpv6 type { nd-neighbor-solicit, echo-request, nd-router-advert, nd-neighbor-advert } counter accept
            icmp type echo-request limit rate 1/second counter accept

            # count and drop any other traffic
            counter drop
    }
    chain OUTBOUND {
        type filter hook output priority 0;
    }
    chain FORWARD {
        type filter hook forward priority 0; policy drop;
    }

    set AuthFailure {
        type ipv4_addr
        flags timeout
        timeout 1h
    }

    set AttackAvoid {
        type ipv4_addr
        flags timeout
        timeout 10d
    }

    set AntiFlooding {
        type ipv4_addr
        flags timeout
    }
}
