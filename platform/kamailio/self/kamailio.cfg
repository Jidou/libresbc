#!KAMAILIO
####### Defined Values #########
# #!define MULTIDOMAIN 0

# - flags
# FLT_ - per transaction (message) flags
#	FLB_ - per branch flags
#!define FLT_NATS 5
#!define FLB_NATB 6
#!define FLB_NATSIPPING 7

####### Global Parameters #########
### LOG Levels: 3=DBG, 2=INFO, 1=NOTICE, 0=WARN, -1=ERR
debug=2
log_stderror=no
memdbg=5
memlog=5
latency_cfg_log=2
latency_log=2
latency_limit_action=100000
latency_limit_db=200000
log_facility=LOG_LOCAL5

fork=yes
children=8

tcp_connect_timeout=5
tcp_send_timeout=2
# life time of TCP connection when there is no traffic
# - a bit higher than registration expires to cope with UA behind NAT
tcp_connection_lifetime=3605
tcp_accept_no_cl=yes
tcp_rd_buf_size=16384

# disable the auto discovery of local aliases based on reverse DNS on IPs (default on)
auto_aliases=no

/* add local domain aliases */
#alias="sip.mydomain.com"

#!ifdef WITH_TLS
enable_tls=yes
listen=tls:{{ansible_host}}:5080 advertise {{ansible_host}}:5080
#!endif

/* uncomment and configure the following line if you want Kamailio to
 * bind on a specific interface/port/proto (default bind on all available) */
listen=udp:{{ansible_host}}:5080 advertise {{ansible_host}}:5080
listen=tcp:{{ansible_host}}:5080 advertise {{ansible_host}}:5080

# server header
server_header="Server: LibreAlp"

####### Modules Section ########
/* set paths to location of modules (to sources or installation folders) */
mpath="/usr/local/lib64/kamailio/modules/"
# ----------------- load modules ---------------
loadmodule "jsonrpcs.so"
loadmodule "kex.so"
loadmodule "corex.so"
loadmodule "tm.so"
loadmodule "tmx.so"
loadmodule "outbound"
loadmodule "sl.so"
loadmodule "rr.so"
loadmodule "pv.so"
loadmodule "dialog.so"
loadmodule "maxfwd.so"
loadmodule "usrloc.so"
loadmodule "registrar.so"
loadmodule "textops.so"
loadmodule "textopsx.so"
loadmodule "siputils.so"
loadmodule "sanity.so"
loadmodule "ctl.so"
loadmodule "cfg_rpc.so"
loadmodule "regex.so"
loadmodule "uac.so"
loadmodule "kemix.so"
loadmodule "auth.so"
loadmodule "auth_db.so"
loadmodule "permissions.so"
loadmodule "dispatcher.so"
loadmodule "nathelper.so"
#!ifdef WITH_TLS
loadmodule "tls.so"
#!endif
loadmodule "debugger.so"
loadmodule "htable.so"
loadmodule "pike.so"
loadmodule "app_lua.so"
loadmodule "db_redis.so"
# ----------------- setting module-specific parameters ---------------

#!define DBURL_USRLOC "redis://127.0.0.1:6379/5"
#!define DBURL_AUTH   "redis://127.0.0.1:6379/6"
#!define DBURL_PERM   "redis://127.0.0.1:6379/7"
#!define DBURL_DLG    "redis://127.0.0.1:6379/8"
modparam("db_redis", "schema_path", "/usr/local/share/kamailio/db_redis/kamailio")
modparam("db_redis", "keys", "version=entry:table_name")
modparam("db_redis", "keys", "location=entry:ruid&usrdom:username,domain&timer:partition,keepalive")
modparam("db_redis", "keys", "subscriber=entry:username,domain")
modparam("db_redis", "keys", "dialog=entry:hash_entry,hash_id&cid:callid")
modparam("db_redis", "keys", "dialog_vars=entry:hash_entry,hash_id,dialog_key&dialog:hash_entry,hash_id")
#modparam("usrloc", "db_url", DBURL_USRLOC)
#modparam("auth_db", "db_url", DBURL_AUTH)
#modparam("permissions", "db_url", DBURL_PERM)
#modparam("dialog", "db_url", DBURL_DLG)

# ------ RPC interface over JSON-RPC ------
modparam("jsonrpcs", "pretty_format", 1)
modparam("jsonrpcs", "fifo_name", "/run/kamailio/kamailio_rpc.fifo")
modparam("jsonrpcs", "dgram_socket", "/run/kamailio/kamailio_rpc.sock")
modparam("ctl", "binrpc", "unix:/run/kamailio/kamailio_ctl")

# ------ Stateful Processing of SIP Transactions -----
# auto-discard branches from previous serial forking leg
modparam("tm", "failure_reply_mode", 3)
# default retransmission timeout: 30sec
modparam("tm", "fr_timer", 30000)
# default invite retransmission timeout after 1xx: 120sec
modparam("tm", "fr_inv_timer", 120000)
modparam("tm", "auto_inv_100_reason", "LibreSBC Trying")

# ---- Record Routing Logic -----
# add value to ;lr param to cope with most of the UAs
modparam("rr", "enable_full_lr", 1)
# do not append from tag to the RR (no need for this script)
modparam("rr", "append_fromtag", 0)

# ---- stateful dialog state (not just transaction state by rr) ----
modparam("dialog", "db_mode", 0)

# ----- User Location -----
modparam("usrloc", "db_mode", 0)

# ----- Register processing logic, location managed by the usrloc -----
modparam("registrar", "method_filtering", 0)
/* allow only 1 contacts per AOR */
modparam("registrar", "max_contacts", 1)
# value for expires of registrations
modparam("registrar", "max_expires", 3600)
modparam("registrar", "min_expires", 60)

# ----- auth_db params -----
modparam("auth_db", "db_url", DBURL_AUTH)
modparam("auth_db", "calculate_ha1", yes)
modparam("auth_db", "password_column", "password")
modparam("auth_db", "load_credentials", "$avp(authname)=username")
modparam("auth_db", "use_domain", 1)

# ----- permissions params -----
modparam("permissions", "db_url", DBURL_PERM)
modparam("permissions", "db_mode", 1)

# ----- SIP load balancer -----
modparam("dispatcher", "list_file", "/usr/local/etc/kamailio/dispatcher.list")
modparam("dispatcher", "flags", 2)
modparam("dispatcher", "xavp_dst", "_dsdst_")

# ----- nathelper params -----
modparam("nathelper", "natping_interval", 300)
modparam("nathelper", "ping_nated_only", 1)
modparam("nathelper", "sipping_bflag", FLB_NATSIPPING)
modparam("nathelper", "sipping_from", "sip:nathelper@libre.sbc")

# params needed for NAT traversal in other modules
modparam("nathelper|registrar", "received_avp", "$avp(RECEIVED)")
modparam("usrloc", "nat_bflag", FLB_NATB)

#!ifdef WITH_TLS
# ----- tls params -----
modparam("tls", "config", "/usr/local/etc/kamailio/tls.cfg")
#!endif

# ----- debugger params -----
modparam("debugger", "cfgtrace", 1)

# ----- pike anti-flooding -----
modparam("pike", "sampling_time_unit", 2)
modparam("pike", "reqs_density_per_unit", 16)
modparam("pike", "remove_latency", 4)
# ----- shared memory hash table -----
# ip ban htable with autoexpire after 10 minutes
modparam("htable", "htable", "ipban=>size=8;autoexpire=600;")

# ----- LUA ROUTING ENGINE -----
modparam("app_lua", "load", "{{rundir}}/callng/kami.lua")
cfgengine "lua"